{"version":3,"sources":["components/TableBody/TableBody.js","components/TableHead/TableHead.js","components/Table/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableBody","body","users","cellsValidation","value","i","arr","usersArr","duplicatePhoneIndx","findIndex","ts","length","duplicateEmailIndx","includes","isNaN","split","className","map","item","TableHead","header","Table","employeesData","console","log","App","useState","setEmployeesData","isFileCorrect","setIsFileCorrect","parse","file","Papa","complete","results","newResult","array","some","result","filter","unshift","push","temp","join","Number","isInteger","toFixed","duplicateIndex","toLowerCase","arrayChanger","data","htmlFor","type","id","accept","onChange","event","target","files","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1c5ae52.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport const TableBody = ({ body, users }) => {\n\n  const cellsValidation = (value, i, arr, usersArr) => {\n    switch (i) {\n      case 1:\n        return;\n\n      case 2:\n        const duplicatePhoneIndx = usersArr\n          .findIndex(ts => ts[2] === arr[2] && ts !== arr);\n\n        if (value.length > 12 || duplicatePhoneIndx !== -1) {\n          return 'error';\n        };\n\n        return;\n\n      case 3:\n        const duplicateEmailIndx = usersArr\n          .findIndex(ts => ts[3] === arr[3] && ts !== arr);\n\n        if (!value.includes('@') || duplicateEmailIndx !== -1) {\n          return 'error';\n        };\n\n        return;\n\n      case 4:\n        if (+value === 0 || +value < 21 || isNaN(+value)) {\n          return 'error';\n        };\n\n        return;\n\n      case 5:\n        if (+arr[i - 1] < +value) {\n          return 'error';\n        };\n\n        return;\n\n      case 6:\n        if (+value > 1000000 || value === '') {\n          return 'error';\n        };\n\n        return;\n\n      case 7:\n        if (value === '') {\n          value = 'FALSE';\n        };\n\n        return;\n\n      case 9:\n        if (value.includes('-')) {\n          const q = value.split('-');\n\n          return (q[0].length === 4) ? '' : 'error';\n        } else if (value.includes('/')) {\n          const q = value.split('/');\n\n          return (q[0].length === 2) ? '' : 'error';\n        } else {\n          return 'error';\n        }\n\n      case 10:\n        if (value.length !== 6) {\n          return 'error';\n        };\n\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <tbody className=\"employees__body\">\n      <tr>\n        {body.map((item, i, arr) => {\n          if (i === 7 && item === '') {\n            item = 'FALSE';\n          }\n\n          return (\n            <td className={cellsValidation(item, i, arr, users)} key={i}>\n              {item}\n            </td>);\n        })}\n      </tr>\n    </tbody>\n  );\n};\n","import React from 'react';\n\n\nexport const TableHead = ({ header }) => {\n\n  return (\n    <thead className=\"employees__header\">\n      <tr className=\"employees__header--cell\">\n        {header.map((item, i) => (\n          <th key={i}>\n            {item}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n};\n","import React from 'react';\nimport { TableBody } from \"../TableBody/TableBody\";\nimport { TableHead } from \"../TableHead/TableHead\";\n\nexport const Table = ({ employeesData }) => {\n\n  console.log(employeesData);\n  return (\n    <table className=\"employees\">\n      {employeesData.map((item, i, arr) => {\n        if (i === 0) {\n          return <TableHead header={item} key={i} />;\n        }\n\n        return <TableBody body={item} users={arr} key={i} />;\n      })}\n    </table>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport Papa from 'papaparse';\nimport { Table } from './components/Table/Table';\n\nfunction App() {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [isFileCorrect, setIsFileCorrect] = useState(true);\n\n  const arrayChanger = (array) => {\n    const isEmpty = array.some((item, i) => item[2] === '' || item[1] === '');\n\n    if (isEmpty) {\n      setIsFileCorrect(false);\n      return;\n    };\n\n    const result = array.filter(item => item.length > 1).map((item, i) => {\n      if (i === 0) {\n        item.unshift('ID');\n        item.push('Duplicate with');\n        return item;\n      }\n\n      if (!item[1].includes('+1')) {\n        const temp = item[1].split('');\n\n        temp.unshift('+1');\n\n        item[1] = temp.join('');\n      }\n\n      item.unshift(i);\n\n      if (!Number.isInteger(+item[6])) {\n        item[6] = Number(item[6]).toFixed(2);\n      }\n\n      return item;\n    })\n\n    for (let i = 1; i < result.length; i++) {\n      const duplicateIndex = result\n        .findIndex(ts => (ts[2] === result[i][2]\n          && ts !== result[i])\n          || (ts[3].toLowerCase() === result[i][3].toLowerCase()\n          && ts !== result[i]));\n\n      if (duplicateIndex > 0) {\n        result[i].push(duplicateIndex);\n      } else {\n        result[i].push('');\n      }\n    }\n\n    return result;\n  }\n\n  const parse = (file) => {\n    if (file[0]) {\n      Papa.parse(file[0], {\n        complete: function(results) {\n          const newResult = arrayChanger(results.data);\n\n          setEmployeesData(newResult);\n        }\n      });\n    } else {\n      return;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <label\n        className=\"import__label\"\n        htmlFor=\"file-input-id\"\n      >\n        Import users\n      </label>\n      <input\n        className=\"import__input\"\n        type=\"file\"\n        id=\"file-input-id\"\n        accept=\".csv\"\n        onChange={(event) => {\n          if (!event.target.files[0].name.includes('.csv')) {\n            setIsFileCorrect(false);\n            return;\n          }\n          setEmployeesData([]);\n          setIsFileCorrect(true);\n          parse(event.target.files);\n        }}\n      />\n\n      {isFileCorrect\n        ? <Table employeesData={employeesData} />\n        : <p className=\"input__error\">\n            File format is not correct\n          </p>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}